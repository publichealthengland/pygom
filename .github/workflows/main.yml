name: pygom

on:
  push:
    branches:
      - master
      - dev
      - feature/*
      - bugfix/*

  pull_request:
    branches:
      - master
      - dev

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]  #, macos-13, macos-14] 
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v1
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/cache@v1
        if: startsWith(runner.os, 'macOS')
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/cache@v1
        if: startsWith(runner.os, 'Windows')
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Check python version
        run: python -c "import sys; print(sys.version)"
        
      - name: RC.exe for Windows
        if: startsWith(runner.os, 'Windows')
        run: |
          function Invoke-VSDevEnvironment {
            $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
                  $installationPath = & $vswhere -prerelease -legacy -latest -property installationPath
                  $Command = Join-Path $installationPath "Common7\Tools\vsdevcmd.bat"
                & "${env:COMSPEC}" /s /c "`"$Command`" -no_logo && set" | Foreach-Object {
                      if ($_ -match '^([^=]+)=(.*)') {
                          [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
                      }
                }
          }
          Invoke-VSDevEnvironment
          Get-Command rc.exe | Format-Table -AutoSize
          echo "::add-path::$(Get-Command rc.exe | Split-Path)"
          
      - name: Install pip 
        run: |
          python -m pip install --upgrade pip
          
      - name: Fix matplotlib backend for MacOS
        if: startsWith(runner.os, 'macOS')
        run: |
          mkdir ~/.matplotlib
          echo "backend: TkAgg" >> ~/.matplotlib/matplotlibrc

      - name: install PyGOM
        run: |
          pip install .

      - name: Run tests
        run: python -m unittest discover --start-directory tests

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]  #, macos-13, macos-14]

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Used to host cibuildwheel
      - uses: actions/setup-python@v5

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.19.2

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        # to supply options, put them in 'env', like:
        # env:
        #   CIBW_SOME_OPTION: value

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl
